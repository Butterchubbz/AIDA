"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AidaService = void 0;
const child_process_1 = require("child_process");
const path = __importStar(require("path"));
const fs = __importStar(require("fs-extra"));
const axios_1 = __importDefault(require("axios"));
const tree_kill_1 = __importDefault(require("tree-kill"));
const error_handler_1 = require("../utils/error-handler");
const config_1 = require("../utils/config");
class AidaService {
    constructor(aidaPath) {
        this.process = null;
        this.aidaPath = aidaPath;
        this.port = config_1.CONFIG.ports.aida;
    }
    async start() {
        try {
            // The AIDA web app is now a bundled resource.
            const packageJsonPath = path.join(this.aidaPath, 'package.json');
            if (!fs.existsSync(packageJsonPath)) {
                throw new error_handler_1.LauncherError('AIDA application not found in resources at ' + this.aidaPath, 'AIDA_NOT_FOUND');
            }
            await this.setupPocketbaseConfig();
            console.log('Starting AIDA from:', this.aidaPath);
            // The vite executable is also a bundled resource.
            const viteExecutable = path.join(this.aidaPath, 'node_modules', 'vite', 'bin', 'vite.js');
            if (!fs.existsSync(viteExecutable)) {
                throw new error_handler_1.LauncherError('Vite executable not found. The AIDA web app dependencies may not be bundled correctly.', 'VITE_NOT_FOUND');
            }
            this.process = (0, child_process_1.spawn)('node', [viteExecutable, '--port', this.port.toString(), '--open', '/control-panel'], {
                cwd: this.aidaPath,
                shell: true,
                env: {
                    ...process.env,
                    BROWSER: 'none'
                }
            });
            await this.waitForReady();
            this.process.stdout?.on('data', (data) => {
                console.log('AIDA:', data.toString().trim());
            });
            this.process.stderr?.on('data', (data) => {
                console.error('AIDA Error:', data.toString().trim());
            });
            return this.port;
        }
        catch (error) {
            throw new error_handler_1.LauncherError(`Failed to start AIDA: ${(0, error_handler_1.getErrorMessage)(error)}`, 'START_FAILED');
        }
    }
    async setupPocketbaseConfig() {
        const libPath = path.join(this.aidaPath, 'src', 'lib');
        const configPath = path.join(libPath, 'pocketbase.js');
        await fs.ensureDir(libPath);
        const configContent = `
            // This file is dynamically generated by the AIDA launcher.
            let pocketbaseInstance = null;
            export default async function getPocketBase() {
                if (!pocketbaseInstance) {
                    const { default: PocketBase } = await import('pocketbase');
                    pocketbaseInstance = new PocketBase('http://127.0.0.1:${config_1.CONFIG.ports.pocketbase}');
                }
                return pocketbaseInstance;
            }
        `;
        await fs.writeFile(configPath, configContent.trim());
    }
    async pollForServerReady(port, retries = 10, delay = 500) {
        for (let i = 0; i < retries; i++) {
            try {
                await axios_1.default.get(`http://localhost:${port}`);
                console.log('AIDA is ready.');
                return;
            }
            catch (error) {
                if (i === retries - 1) {
                    throw new error_handler_1.LauncherError(`AIDA started on port ${port} but is not responding: ${(0, error_handler_1.getErrorMessage)(error)}`, 'NOT_RESPONDING');
                }
                await new Promise(resolve => setTimeout(resolve, delay));
            }
        }
    }
    async waitForReady() {
        const stripAnsi = (await import('strip-ansi')).default;
        return new Promise((resolve, reject) => {
            if (!this.process) {
                return reject(new error_handler_1.LauncherError('AIDA process not spawned', 'PROCESS_NOT_SPAWNED'));
            }
            const timeout = setTimeout(() => {
                cleanup();
                reject(new error_handler_1.LauncherError('AIDA failed to start within 30 seconds.', 'TIMEOUT'));
            }, 30000);
            let buffer = '';
            let portFound = false;
            const onData = (data) => {
                if (portFound)
                    return;
                const cleanOutput = stripAnsi(data.toString());
                buffer += cleanOutput;
                console.log('AIDA:', cleanOutput.trim());
                const portMatch = buffer.match(/http:\/\/localhost:(\d+)/);
                if (portMatch) {
                    portFound = true;
                    this.port = parseInt(portMatch[1], 10);
                    console.log(`AIDA detected running on port ${this.port}`);
                    cleanup();
                    this.pollForServerReady(this.port)
                        .then(resolve)
                        .catch(reject);
                }
            };
            const cleanup = () => {
                clearTimeout(timeout);
                this.process?.stdout?.removeListener('data', onData);
                this.process?.stderr?.removeListener('data', onData);
            };
            this.process.stdout?.on('data', onData);
            this.process.stderr?.on('data', onData);
        });
    }
    stop() {
        return new Promise((resolve, reject) => {
            if (!this.process || !this.process.pid) {
                this.process = null;
                return resolve();
            }
            (0, tree_kill_1.default)(this.process.pid, 'SIGKILL', (err) => {
                if (err) {
                    console.error('Failed to kill AIDA process tree:', err);
                    reject(err);
                }
                else {
                    console.log('AIDA process tree killed successfully.');
                    this.process = null;
                    resolve();
                }
            });
        });
    }
    getPort() {
        return this.port;
    }
}
exports.AidaService = AidaService;
